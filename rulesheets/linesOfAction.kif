; Lines of Action
; Game created by Claude Soucie
; GDL by Alex Landau

; The specific rules recorded by Mark Winands are used. In particular:
; - Both players becoming connected simultaneously results in a draw
; - A player with no available moves passes the turn
; This version also adds a step counter in lieu of the repeated-position
; rule to ensure termination.

(role black)
(role white)

(init (cell b 1 black))
(init (cell c 1 black))
(init (cell d 1 black))
(init (cell e 1 black))
(init (cell f 1 black))
(init (cell g 1 black))
(init (cell b 8 black))
(init (cell c 8 black))
(init (cell d 8 black))
(init (cell e 8 black))
(init (cell f 8 black))
(init (cell g 8 black))
(init (cell a 2 white))
(init (cell a 3 white))
(init (cell a 4 white))
(init (cell a 5 white))
(init (cell a 6 white))
(init (cell a 7 white))
(init (cell h 2 white))
(init (cell h 3 white))
(init (cell h 4 white))
(init (cell h 5 white))
(init (cell h 6 white))
(init (cell h 7 white))

(init (control black))
(init (step 0))

; Legal moves:

(<= (startingPointOfLine ?x ?y ?dir ?startX ?startY)
    (oppositeDir ?dir ?oppDir)
    (nextCellInDir ?oppDir ?x ?y ?x2 ?y2)
    (startingPointOfLine ?x2 ?y2 ?dir ?startX ?startY))
(<= (canGoFurther ?x ?y ?dir)
    (nextCellInDir ?dir ?x ?y ?x2 ?y2))
(<= (startingPointOfLine ?x ?y ?dir ?x ?y)
    (file ?x)
    (rank ?y)
    (oppositeDir ?dir ?oppDir)
    (not (canGoFurther ?x ?y ?oppDir)))

; TODO: Canonicalize one direction per line
(<= (lineCount ?startX ?startY ?dir ?count) ; this is returning nothing for reasonable inputs
    (oppositeEndOfLine ?startX ?startY ?dir ?endX ?endY)
    (partialLineCount ?startX ?startY ?dir ?count ?endX ?endY))
(<= (oppositeEndOfLine ?startX ?startY ?dir ?endX ?endY) ; this is returning nothing for reasonable inputs
    (oppositeDir ?dir ?oppDir)
    (startingPointOfLine ?startX ?startY ?oppDir ?endX ?endY))
(<= (partialLineCount ?startX ?startY ?dir 0 ?startX ?startY)
    (startingPointOfLine ?startX ?startY ?dir ?startX ?startY)
    (empty ?startX ?startY))
(<= (partialLineCount ?startX ?startY ?dir 1 ?startX ?startY)
    (startingPointOfLine ?startX ?startY ?dir ?startX ?startY)
    (true (cell ?startX ?startY ?anyPlayer)))
(<= (partialLineCount ?startX ?startY ?dir ?n ?x2 ?y2)
    (partialLineCount ?startX ?startY ?dir ?n ?x1 ?y1)
    (nextCellInDir ?dir ?x1 ?y1 ?x2 ?y2)
    (empty ?x2 ?y2))
(<= (partialLineCount ?startX ?startY ?dir ?np1 ?x2 ?y2)
    (partialLineCount ?startX ?startY ?dir ?n ?x1 ?y1)
    (nextCellInDir ?dir ?x1 ?y1 ?x2 ?y2)
    (true (cell ?x2 ?y2 ?anyPlayer))
    (succ8 ?n ?np1))

(<= (moveLength ?x ?y ?dir ?length)
    (startingPointOfLine ?x ?y ?dir ?startX ?startY)
    (lineCount ?startX ?startY ?dir ?length))

(<= (legal ?player noop)
    (role ?player)
    (not (true (control ?player))))
(<= (legal ?player ?move)
    (true (control ?player))
    (legalMove ?player ?move))
; If no legal moves are available, offer a noop move
(<= (legal ?player noop)
    (true (control ?player))
    (not (anyLegalMove ?player)))
(<= (anyLegalMove ?player)
    (legalMove ?player ?move))

(<= (legalMove ?player (move ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 ?player))
    (dir ?dir)
    (moveLength ?x1 ?y1 ?dir ?length) ; This is returning no results; should always return 1
    (canMoveNSpacesInDir ?player ?x1 ?y1 ?dir ?length ?x2 ?y2))

(<= (canMoveNSpacesInDir ?player ?x1 ?y1 ?dir 1 ?x2 ?y2)
    (nextCellInDir ?dir ?x1 ?y1 ?x2 ?y2)
    (role ?player)
    (empty ?x2 ?y2))
(<= (canMoveNSpacesInDir ?player ?x1 ?y1 ?dir 1 ?x2 ?y2)
    (nextCellInDir ?dir ?x1 ?y1 ?x2 ?y2)
    (opponent ?player ?opponent)
    (true (cell ?x2 ?y2 ?opponent)))
; TODO: OPNF thinks N can be something like 50 here; this causes problems
(<= (canMoveNSpacesInDir ?player ?x1 ?y1 ?dir ?np1 ?x3 ?y3)
    (succ8 ?n ?np1)
    (distinct ?np1 1)
    (nextCellInDir ?dir ?x1 ?y1 ?x2 ?y2)
    (or (empty ?x2 ?y2)
        (true (cell ?x2 ?y2 ?player)))
    (canMoveNSpacesInDir ?player ?x2 ?y2 ?dir ?n ?x3 ?y3))

(<= (empty ?x ?y)
    (file ?x)
    (rank ?y)
    (not (true (cell ?x ?y white)))
    (not (true (cell ?x ?y black))))

(<= (next (control white))
    (true (control black)))
(<= (next (control black))
    (true (control white)))
(<= (next (step ?np1))
    (true (step ?n))
    (succ ?n ?np1))

(<= (next (cell ?x ?y ?player))
    (true (cell ?x ?y ?player))
    (not (affected ?x ?y)))
(<= (affected ?x1 ?y1)
    (does ?player (move ?x1 ?y1 ?x2 ?y2)))
(<= (affected ?x2 ?y2)
    (does ?player (move ?x1 ?y1 ?x2 ?y2)))
(<= (next (cell ?x2 ?y2 ?player))
    (does ?player (move ?x1 ?y1 ?x2 ?y2)))

; A player wins when they bring all their checkers together into one contiguous body
; TODO: This computation is taking a lot of time...
(<= (notAllConnected ?player)
    (true (cell ?x1 ?y1 ?player))
    (true (cell ?x2 ?y2 ?player))
    (or (distinct ?x1 ?x2)
        (distinct ?y1 ?y2))
    (not (connected ?player ?x1 ?y1 ?x2 ?y2)))
(<= (connected ?player ?x1 ?y1 ?x2 ?y2)
    (true (cell ?x1 ?y1 ?player))
    (adjacent ?x1 ?y1 ?x2 ?y2)
    (true (cell ?x2 ?y2 ?player)))
(<= (connected ?player ?x1 ?y1 ?x3 ?y3)
    (connected ?player ?x1 ?y1 ?x2 ?y2)
    (adjacent ?x2 ?y2 ?x3 ?y3)
    (true (cell ?x3 ?y3 ?player)))

(<= (allConnected ?player)
    (role ?player)
    (not (notAllConnected ?player)))

(<= terminal
    (allConnected ?player))
(<= terminal
    (true (step 50)))

(<= (goal ?player 100)
    (allConnected ?player)
    (opponent ?player ?opponent)
    (notAllConnected ?opponent))
(<= (goal ?player 0)
    (notAllConnected ?player)
    (opponent ?player ?opponent)
    (allConnected ?opponent))
(<= (goal ?player 50)
    (allConnected ?player)
    (opponent ?player ?opponent)
    (allConnected ?opponent))
(<= (goal ?player 50)
    (notAllConnected ?player)
    (opponent ?player ?opponent)
    (notAllConnected ?opponent))

(opponent white black)
(opponent black white)

(file a)
(file b)
(file c)
(file d)
(file e)
(file f)
(file g)
(file h)
(rank 1)
(rank 2)
(rank 3)
(rank 4)
(rank 5)
(rank 6)
(rank 7)
(rank 8)
(nextFile a b)
(nextFile b c)
(nextFile c d)
(nextFile d e)
(nextFile e f)
(nextFile f g)
(nextFile g h)
(nextRank 1 2)
(nextRank 2 3)
(nextRank 3 4)
(nextRank 4 5)
(nextRank 5 6)
(nextRank 6 7)
(nextRank 7 8)
(dir n)
(dir ne)
(dir e)
(dir se)
(dir s)
(dir sw)
(dir w)
(dir nw)
(oppositeDir n s)
(oppositeDir ne sw)
(oppositeDir e w)
(oppositeDir se nw)
(oppositeDir s n)
(oppositeDir sw ne)
(oppositeDir w e)
(oppositeDir nw se)


(<= (nextCellInDir n ?x ?y1 ?x ?y2)
    (file ?x)
    (nextRank ?y1 ?y2))
(<= (nextCellInDir ne ?x1 ?y1 ?x2 ?y2)
    (nextFile ?x1 ?x2)
    (nextRank ?y1 ?y2))
(<= (nextCellInDir e ?x1 ?y ?x2 ?y)
    (nextFile ?x1 ?x2)
    (rank ?y))
(<= (nextCellInDir se ?x1 ?y1 ?x2 ?y2)
    (nextFile ?x1 ?x2)
    (nextRank ?y2 ?y1))
(<= (nextCellInDir s ?x ?y1 ?x ?y2)
    (file ?x)
    (nextRank ?y2 ?y1))
(<= (nextCellInDir sw ?x1 ?y1 ?x2 ?y2)
    (nextFile ?x2 ?x1)
    (nextRank ?y2 ?y1))
(<= (nextCellInDir w ?x1 ?y ?x2 ?y)
    (nextFile ?x2 ?x1)
    (rank ?y))
(<= (nextCellInDir nw ?x1 ?y1 ?x2 ?y2)
    (nextFile ?x2 ?x1)
    (nextRank ?y1 ?y2))

(<= (adjacent ?x1 ?y1 ?x2 ?y2)
    (nextCellInDir ?dir ?x1 ?y1 ?x2 ?y2))

(succ8 0 1)
(succ8 1 2)
(succ8 2 3)
(succ8 3 4)
(succ8 4 5)
(succ8 5 6)
(succ8 6 7)
(succ8 7 8)

(succ 0 1)
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)
(succ 19 20)
(succ 20 21)
(succ 21 22)
(succ 22 23)
(succ 23 24)
(succ 24 25)
(succ 25 26)
(succ 26 27)
(succ 27 28)
(succ 28 29)
(succ 29 30)
(succ 30 31)
(succ 31 32)
(succ 32 33)
(succ 33 34)
(succ 34 35)
(succ 35 36)
(succ 36 37)
(succ 37 38)
(succ 38 39)
(succ 39 40)
(succ 40 41)
(succ 41 42)
(succ 42 43)
(succ 43 44)
(succ 44 45)
(succ 45 46)
(succ 46 47)
(succ 47 48)
(succ 48 49)
(succ 49 50)

(base (control white))
(base (control black))
(base (step 0))
(<= (base (step ?np1))
    (succ ?n ?np1))
(<= (base (cell ?x ?y ?player))
    (file ?x)
    (rank ?y)
    (role ?player))

(<= (input ?player noop)
    (role ?player))
(<= (input ?player (move ?x1 ?y1 ?x2 ?y2))
    (role ?player)
    (straightLine ?dir ?x1 ?y1 ?x2 ?y2))
(<= (straightLine ?dir ?x1 ?y1 ?x2 ?y2)
    (nextCellInDir ?dir ?x1 ?y1 ?x2 ?y2))
(<= (straightLine ?dir ?x1 ?y1 ?x3 ?y3)
    (nextCellInDir ?dir ?x1 ?y1 ?x2 ?y2)
    (straightLine ?dir ?x2 ?y2 ?x3 ?y3))
